{"ast":null,"code":"var _jsxFileName = \"/Users/jialinwu/d3-weather/client/src/components/PieChart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass PieChart extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      var width = 1000;\n      let height = 600; // append the svg object to the div called 'my_dataviz'\n\n      var svg = d3.select(\"#PieChart\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + width / 4 + \",\" + height / 2 + \")\").append(\"g\").attr(\"transform\", \"translate(\" + width / 4 * 3 + \",\" + height / 2 + \")\");\n      ; // Create dummy data\n\n      var data = {\n        a: 1,\n        b: 1,\n        c: 1,\n        d: 1,\n        e: 1,\n        f: 1,\n        g: 1,\n        h: 1,\n        i: 1,\n        j: 1,\n        k: 1,\n        l: 1 // calculate current hour:\n\n      };\n      var date = new Date(this.props.hourly[0].time * 1000);\n      var hour = date.getHours(); // calculate the average of the data:\n\n      var sum = 0;\n\n      for (let j = 0; j < 24; j++) {\n        sum += this.props.hourly[j].temperature;\n      }\n\n      var average = sum / 24;\n      var dataHeightArray1 = [];\n      var dataHeightArray2 = [];\n      var weatherColorMAP = {\n        \"clear-day\": \"#f5d442\",\n        \"clear-night\": \"#f5d442\",\n        \"cloudy\": \"#87fae3\",\n        \"partly-cloudy-day\": \"#87fae3\",\n        \"partly-cloudy-night\": \"#87fae3\",\n        \"rain\": \"#93cafa\"\n      };\n      var weatherColor1 = [];\n      var weatherColor2 = []; // adding height and color together\n\n      for (let i = 0; i < 12; i++) {\n        dataHeightArray1[(i + hour) % 12] = (this.props.hourly[i].temperature - average) * 8 + 190;\n        weatherColor1[(i + hour) % 12] = weatherColorMAP[this.props.hourly[i].icon];\n      }\n\n      for (let i = 12; i < 24; i++) {\n        dataHeightArray2[(i + hour) % 12] = (this.props.hourly[i].temperature - average) * 8 + 190;\n        weatherColor2[(i + hour) % 12] = weatherColorMAP[this.props.hourly[i].icon];\n      }\n\n      var dataHeight1 = d3.scaleOrdinal().domain(data).range(dataHeightArray1);\n      var dataHeight2 = d3.scaleOrdinal().domain(data).range(dataHeightArray2); // set the color scale\n\n      var color = d3.scaleOrdinal().domain(data).range(weatherColor1); // Compute the position of each group on the pie:\n\n      var pie = d3.pie().value(function (d) {\n        return d.value;\n      });\n      var data_ready = pie(d3.entries(data)); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n      svg.selectAll('whatever').data(data_ready).enter().append('path').attr('d', d3.arc().innerRadius(130).outerRadius(function (d) {\n        return dataHeight1(d.data.key);\n      })).attr('fill', function (d) {\n        return color(d.data.key);\n      }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"PieChart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/jialinwu/d3-weather/client/src/components/PieChart.js"],"names":["React","Component","d3","PieChart","componentDidMount","width","height","svg","select","append","attr","data","a","b","c","d","e","f","g","h","i","j","k","l","date","Date","props","hourly","time","hour","getHours","sum","temperature","average","dataHeightArray1","dataHeightArray2","weatherColorMAP","weatherColor1","weatherColor2","icon","dataHeight1","scaleOrdinal","domain","range","dataHeight2","color","pie","value","data_ready","entries","selectAll","enter","arc","innerRadius","outerRadius","key","style","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass PieChart extends Component {\n\n\n  componentDidMount = () => {\n    var width = 1000\n    let height = 600\n\n    // append the svg object to the div called 'my_dataviz'\n    var svg = d3.select(\"#PieChart\")\n    .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n    .append(\"g\")\n        .attr(\"transform\", \"translate(\" + width / 4+ \",\" + height / 2 + \")\")\n    .append(\"g\")\n        .attr(\"transform\", \"translate(\" + width / 4 * 3 + \",\" + height / 2 + \")\");;\n    \n    // Create dummy data\n    var data = {a: 1, b: 1, c:1, d:1, e:1, f:1, g:1, h:1, i:1, j:1, k:1, l: 1}\n\n    // calculate current hour:\n    var date = new Date(this.props.hourly[0].time * 1000);\n    var hour = date.getHours();\n\n    // calculate the average of the data:\n    var sum = 0;\n    for (let j = 0; j < 24; j++) {\n      sum += this.props.hourly[j].temperature;\n    }\n    var average = sum / 24;\n\n    var dataHeightArray1 = []\n    var dataHeightArray2 = []\n\n    var weatherColorMAP = {\n      \"clear-day\": \"#f5d442\",\n      \"clear-night\": \"#f5d442\",\n      \"cloudy\": \"#87fae3\",\n      \"partly-cloudy-day\": \"#87fae3\",\n      \"partly-cloudy-night\": \"#87fae3\",\n      \"rain\": \"#93cafa\"\n    }\n    var weatherColor1 = [];\n    var weatherColor2 = [];\n    // adding height and color together\n    for (let i = 0; i < 12; i++) {\n      dataHeightArray1[(i + hour) % 12] = (this.props.hourly[i].temperature - average) * 8 + 190;\n      weatherColor1[(i + hour) % 12] = weatherColorMAP[(this.props.hourly[i].icon)]\n    }\n    for (let i = 12; i < 24; i++) {\n      dataHeightArray2[(i + hour) % 12] = (this.props.hourly[i].temperature - average) * 8 + 190;\n      weatherColor2[(i + hour) % 12] = weatherColorMAP[(this.props.hourly[i].icon)]\n    }\n\n    var dataHeight1 = d3.scaleOrdinal()\n    .domain(data)\n    .range(dataHeightArray1)\n  \n    var dataHeight2 = d3.scaleOrdinal()\n    .domain(data)\n    .range(dataHeightArray2)\n\n    // set the color scale\n    var color = d3.scaleOrdinal()\n    .domain(data)\n    .range(weatherColor1)\n\n\n    // Compute the position of each group on the pie:\n    var pie = d3.pie()\n    .value(function(d) {return d.value; })\n    var data_ready = pie(d3.entries(data))\n\n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n    svg\n    .selectAll('whatever')\n    .data(data_ready)\n    .enter()\n    .append('path')\n    .attr('d', d3.arc()\n        .innerRadius(130)\n        .outerRadius(function(d){ return (dataHeight1(d.data.key))})\n    )\n    .attr('fill', function(d){ return(color(d.data.key)) })\n    .attr(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"2px\")\n    .style(\"opacity\", 0.7)\n  }\n  \n  render() {\n      return (\n        <div id=\"PieChart\">\n\n        </div>\n      );\n    }\n  }\n\nexport default PieChart;"]},"metadata":{},"sourceType":"module"}
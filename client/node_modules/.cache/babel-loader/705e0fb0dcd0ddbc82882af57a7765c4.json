{"ast":null,"code":"var _jsxFileName = \"/Users/jialinwu/d3-weather/client/src/components/PieChart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\"; // import './PieChart.css';\n\nclass PieChart extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      var width = 1000;\n      let height = 500;\n      let margin = 40; // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n      var radius = Math.min(width, height) / 2 - margin; // append the svg object to the div called 'my_dataviz'\n\n      var svg = d3.select(\"#PieChart\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\"); // Create dummy data\n\n      var data = {\n        a: 1,\n        b: 1,\n        c: 1,\n        d: 1,\n        e: 1 // set the color scale\n\n      };\n      var color = d3.scaleOrdinal().domain(data).range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"]);\n      var dataHeightArray = [];\n      console.log(this.props.hourly);\n\n      for (let i = 0; i < 5; i++) {\n        dataHeightArray[i] = this.props.hourly[i].temperature;\n      }\n\n      var dataHeight = d3.scaleOrdinal().domain(data).range(dataHeightArray); // Compute the position of each group on the pie:\n\n      var pie = d3.pie().value(function (d) {\n        return d.value;\n      });\n      var data_ready = pie(d3.entries(data));\n      var weatherData = this.props.hourly;\n      console.log(this.props.hourly);\n\n      function* dataGenerator() {\n        for (let hour in weatherData) {\n          console.log(1);\n          yield hour.temperature;\n        }\n      }\n\n      let gen = dataGenerator(); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n      svg.selectAll('whatever').data(data_ready).enter().append('path').attr('d', d3.arc().innerRadius(130).outerRadius(function (d) {\n        return dataHeight(d.data.key);\n      })).attr('fill', function (d) {\n        return color(d.data.key);\n      }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"PieChart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/jialinwu/d3-weather/client/src/components/PieChart.js"],"names":["React","Component","d3","PieChart","componentDidMount","width","height","margin","radius","Math","min","svg","select","append","attr","data","a","b","c","d","e","color","scaleOrdinal","domain","range","dataHeightArray","console","log","props","hourly","i","temperature","dataHeight","pie","value","data_ready","entries","weatherData","dataGenerator","hour","gen","selectAll","enter","arc","innerRadius","outerRadius","key","style","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\n// import './PieChart.css';\n\nclass PieChart extends Component {\n\n\n  componentDidMount = () => {\n    var width = 1000\n    let height = 500\n    let margin = 40\n\n    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n    var radius = Math.min(width, height) / 2 - margin\n\n    // append the svg object to the div called 'my_dataviz'\n    var svg = d3.select(\"#PieChart\")\n    .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n    .append(\"g\")\n        .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n    \n    // Create dummy data\n    var data = {a: 1, b: 1, c:1, d:1, e:1}\n\n    // set the color scale\n    var color = d3.scaleOrdinal()\n    .domain(data)\n    .range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"])\n\n    var dataHeightArray = []\n\n    console.log(this.props.hourly)\n\n    for (let i = 0; i < 5; i++) {\n       dataHeightArray[i] = this.props.hourly[i].temperature;\n    }\n\n    var dataHeight = d3.scaleOrdinal()\n    .domain(data)\n    .range(dataHeightArray)\n\n    // Compute the position of each group on the pie:\n    var pie = d3.pie()\n    .value(function(d) {return d.value; })\n    var data_ready = pie(d3.entries(data))\n\n\n    var weatherData = this.props.hourly;\n\n    console.log(this.props.hourly)\n\n    function* dataGenerator() {\n      for (let hour in weatherData) {\n        console.log(1)\n        yield hour.temperature;\n      }\n    }\n\n    let gen = dataGenerator();\n\n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n    svg\n    .selectAll('whatever')\n    .data(data_ready)\n    .enter()\n    .append('path')\n    .attr('d', d3.arc()\n        .innerRadius(130)\n        .outerRadius(function(d){ return (dataHeight(d.data.key))})\n    )\n    .attr('fill', function(d){ return(color(d.data.key)) })\n    .attr(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"2px\")\n    .style(\"opacity\", 0.7)\n  }\n  \n  render() {\n      return (\n        <div id=\"PieChart\">\n\n        </div>\n      );\n    }\n  }\n\nexport default PieChart;"]},"metadata":{},"sourceType":"module"}
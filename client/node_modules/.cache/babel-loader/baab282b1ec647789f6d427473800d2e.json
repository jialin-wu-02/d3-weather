{"ast":null,"code":"var _jsxFileName = \"/Users/jialinwu/d3-weather/client/src/components/PieChart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass PieChart extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      var width = 1000;\n      let height = 600;\n      let margin = 0; // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n      var radius = Math.min(width, height) / 2 - margin; // append the svg object to the div called 'my_dataviz'\n\n      var svg = d3.select(\"#PieChart\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + width / 4 + \",\" + height / 2 + \")\"); // Create dummy data\n\n      var data = {\n        a: 1,\n        b: 1,\n        c: 1,\n        d: 1,\n        e: 1,\n        f: 1,\n        g: 1,\n        h: 1,\n        i: 1,\n        j: 1,\n        k: 1,\n        l: 1 // calculate current hour:\n\n      };\n      var date = new Date(this.props.hourly[0].time * 1000);\n      var hour = date.getHours();\n      console.log(hour); // calculate the average of the data:\n\n      var sum = 0;\n\n      for (let j = 0; j < 24; j++) {\n        sum += this.props.hourly[j].temperature;\n      }\n\n      var average = sum / 24;\n      var dataHeightArray = [];\n      var weatherColorMAP = {\n        \"clear-day\": \"#f5d442\",\n        \"clear-night\": \"#f5d442\",\n        \"cloudy\": \"#87fae3\",\n        \"partly-cloudy-day\": \"#87fae3\",\n        \"partly-cloudy-night\": \"#87fae3\",\n        \"rain\": \"#93cafa\"\n      };\n      var weatherColor = []; // adding height and color together\n\n      for (let i = 0; i < 12; i++) {\n        dataHeightArray[(i + hour) % 12] = (this.props.hourly[i].temperature - average) * 8 + 190;\n        weatherColor[(i + hour) % 12] = weatherColorMAP[this.props.hourly[i].icon];\n      }\n\n      var dataHeight = d3.scaleOrdinal().domain(data).range(dataHeightArray); // set the color scale\n\n      var color = d3.scaleOrdinal().domain(data).range(weatherColor); // Compute the position of each group on the pie:\n\n      var pie = d3.pie().value(function (d) {\n        return d.value;\n      });\n      var data_ready = pie(d3.entries(data)); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n      svg.selectAll('whatever').data(data_ready).enter().append('path').attr('d', d3.arc().innerRadius(130).outerRadius(function (d) {\n        return dataHeight(d.data.key);\n      })).attr('fill', function (d) {\n        return color(d.data.key);\n      }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"PieChart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/jialinwu/d3-weather/client/src/components/PieChart.js"],"names":["React","Component","d3","PieChart","componentDidMount","width","height","margin","radius","Math","min","svg","select","append","attr","data","a","b","c","d","e","f","g","h","i","j","k","l","date","Date","props","hourly","time","hour","getHours","console","log","sum","temperature","average","dataHeightArray","weatherColorMAP","weatherColor","icon","dataHeight","scaleOrdinal","domain","range","color","pie","value","data_ready","entries","selectAll","enter","arc","innerRadius","outerRadius","key","style","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass PieChart extends Component {\n\n\n  componentDidMount = () => {\n    var width = 1000\n    let height = 600\n    let margin = 0\n\n    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n    var radius = Math.min(width, height) / 2 - margin\n\n    // append the svg object to the div called 'my_dataviz'\n    var svg = d3.select(\"#PieChart\")\n    .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n    .append(\"g\")\n        .attr(\"transform\", \"translate(\" + width / 4+ \",\" + height / 2 + \")\");\n    \n    // Create dummy data\n    var data = {a: 1, b: 1, c:1, d:1, e:1, f:1, g:1, h:1, i:1, j:1, k:1, l: 1}\n\n    // calculate current hour:\n    var date = new Date(this.props.hourly[0].time * 1000);\n    var hour = date.getHours();\n    console.log(hour)\n\n    // calculate the average of the data:\n    var sum = 0;\n    for (let j = 0; j < 24; j++) {\n      sum += this.props.hourly[j].temperature;\n    }\n    var average = sum / 24;\n\n    var dataHeightArray = []\n    var weatherColorMAP = {\n      \"clear-day\": \"#f5d442\",\n      \"clear-night\": \"#f5d442\",\n      \"cloudy\": \"#87fae3\",\n      \"partly-cloudy-day\": \"#87fae3\",\n      \"partly-cloudy-night\": \"#87fae3\",\n      \"rain\": \"#93cafa\"\n    }\n    var weatherColor = [];\n    // adding height and color together\n    for (let i = 0; i < 12; i++) {\n      dataHeightArray[(i + hour) % 12] = (this.props.hourly[i].temperature - average) * 8 + 190;\n      weatherColor[(i + hour) % 12] = weatherColorMAP[(this.props.hourly[i].icon)]\n    }\n\n    var dataHeight = d3.scaleOrdinal()\n    .domain(data)\n    .range(dataHeightArray)\n\n    // set the color scale\n    var color = d3.scaleOrdinal()\n    .domain(data)\n    .range(weatherColor)\n\n\n    // Compute the position of each group on the pie:\n    var pie = d3.pie()\n    .value(function(d) {return d.value; })\n    var data_ready = pie(d3.entries(data))\n\n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n    svg\n    .selectAll('whatever')\n    .data(data_ready)\n    .enter()\n    .append('path')\n    .attr('d', d3.arc()\n        .innerRadius(130)\n        .outerRadius(function(d){ return (dataHeight(d.data.key))})\n    )\n    .attr('fill', function(d){ return(color(d.data.key)) })\n    .attr(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"2px\")\n    .style(\"opacity\", 0.7)\n  }\n  \n  render() {\n      return (\n        <div id=\"PieChart\">\n\n        </div>\n      );\n    }\n  }\n\nexport default PieChart;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jialinwu/d3-weather/client/src/components/BarChart.js\";\nimport React, { Component } from 'react'; // import './BarChart.css';\n\nclass BarChart extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      var width = 450;\n      height = 450;\n      margin = 40; // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n      var radius = Math.min(width, height) / 2 - margin; // append the svg object to the div called 'my_dataviz'\n\n      var svg = d3.select(\"#BarChart\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\"); // Create dummy data\n\n      var data = {\n        a: 9,\n        b: 20,\n        c: 30,\n        d: 8,\n        e: 12 // set the color scale\n\n      };\n      var color = d3.scaleOrdinal().domain(data).range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"]); // Compute the position of each group on the pie:\n\n      var pie = d3.pie().value(function (d) {\n        return d.value;\n      });\n      var data_ready = pie(d3.entries(data)); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n      svg.selectAll('whatever').data(data_ready).enter().append('path').attr('d', d3.arc().innerRadius(0).outerRadius(radius)).attr('fill', function (d) {\n        return color(d.data.key);\n      }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"BarChart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/jialinwu/d3-weather/client/src/components/BarChart.js"],"names":["React","Component","BarChart","componentDidMount","width","height","margin","radius","Math","min","svg","d3","select","append","attr","data","a","b","c","d","e","color","scaleOrdinal","domain","range","pie","value","data_ready","entries","selectAll","enter","arc","innerRadius","outerRadius","key","style","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AAEA,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAG/BE,iBAH+B,GAGX,MAAM;AACxB,UAAIC,KAAK,GAAG,GAAZ;AACAC,MAAAA,MAAM,GAAG,GAAT;AACAC,MAAAA,MAAM,GAAG,EAAT,CAHwB,CAKxB;;AACA,UAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASL,KAAT,EAAgBC,MAAhB,IAA0B,CAA1B,GAA8BC,MAA3C,CANwB,CAQxB;;AACA,UAAII,GAAG,GAAGC,EAAE,CAACC,MAAH,CAAU,WAAV,EACTC,MADS,CACF,KADE,EAELC,IAFK,CAEA,OAFA,EAESV,KAFT,EAGLU,IAHK,CAGA,QAHA,EAGUT,MAHV,EAITQ,MAJS,CAIF,GAJE,EAKLC,IALK,CAKA,WALA,EAKa,eAAeV,KAAK,GAAG,CAAvB,GAA2B,GAA3B,GAAiCC,MAAM,GAAG,CAA1C,GAA8C,GAL3D,CAAV,CATwB,CAgBxB;;AACA,UAAIU,IAAI,GAAG;AAACC,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,CAAC,EAAE,EAAV;AAAcC,QAAAA,CAAC,EAAC,EAAhB;AAAoBC,QAAAA,CAAC,EAAC,CAAtB;AAAyBC,QAAAA,CAAC,EAAC,EAA3B,CAEX;;AAFW,OAAX;AAGA,UAAIC,KAAK,GAAGV,EAAE,CAACW,YAAH,GACXC,MADW,CACJR,IADI,EAEXS,KAFW,CAEL,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAFK,CAAZ,CApBwB,CAwBxB;;AACA,UAAIC,GAAG,GAAGd,EAAE,CAACc,GAAH,GACTC,KADS,CACH,UAASP,CAAT,EAAY;AAAC,eAAOA,CAAC,CAACO,KAAT;AAAiB,OAD3B,CAAV;AAEA,UAAIC,UAAU,GAAGF,GAAG,CAACd,EAAE,CAACiB,OAAH,CAAWb,IAAX,CAAD,CAApB,CA3BwB,CA6BxB;;AACAL,MAAAA,GAAG,CACFmB,SADD,CACW,UADX,EAECd,IAFD,CAEMY,UAFN,EAGCG,KAHD,GAICjB,MAJD,CAIQ,MAJR,EAKCC,IALD,CAKM,GALN,EAKWH,EAAE,CAACoB,GAAH,GACNC,WADM,CACM,CADN,EAENC,WAFM,CAEM1B,MAFN,CALX,EASCO,IATD,CASM,MATN,EASc,UAASK,CAAT,EAAW;AAAE,eAAOE,KAAK,CAACF,CAAC,CAACJ,IAAF,CAAOmB,GAAR,CAAZ;AAA2B,OATtD,EAUCpB,IAVD,CAUM,QAVN,EAUgB,OAVhB,EAWCqB,KAXD,CAWO,cAXP,EAWuB,KAXvB,EAYCA,KAZD,CAYO,SAZP,EAYkB,GAZlB;AAaD,KA9C8B;AAAA;;AAgD/BC,EAAAA,MAAM,GAAG;AACL,WACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKD;;AAtD4B;;AAyDjC,eAAelC,QAAf","sourcesContent":["import React, { Component } from 'react';\n\n// import './BarChart.css';\n\nclass BarChart extends Component {\n\n\n  componentDidMount = () => {\n    var width = 450\n    height = 450\n    margin = 40\n\n    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n    var radius = Math.min(width, height) / 2 - margin\n\n    // append the svg object to the div called 'my_dataviz'\n    var svg = d3.select(\"#BarChart\")\n    .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n    .append(\"g\")\n        .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n    // Create dummy data\n    var data = {a: 9, b: 20, c:30, d:8, e:12}\n\n    // set the color scale\n    var color = d3.scaleOrdinal()\n    .domain(data)\n    .range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"])\n\n    // Compute the position of each group on the pie:\n    var pie = d3.pie()\n    .value(function(d) {return d.value; })\n    var data_ready = pie(d3.entries(data))\n\n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n    svg\n    .selectAll('whatever')\n    .data(data_ready)\n    .enter()\n    .append('path')\n    .attr('d', d3.arc()\n        .innerRadius(0)\n        .outerRadius(radius)\n    )\n    .attr('fill', function(d){ return(color(d.data.key)) })\n    .attr(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"2px\")\n    .style(\"opacity\", 0.7)\n  }\n  \n  render() {\n      return (\n        <div className=\"BarChart\">\n\n        </div>\n      );\n    }\n  }\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}